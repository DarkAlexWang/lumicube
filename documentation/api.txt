==================================
Predefined variables and functions
==================================

black = 0
grey = 0x808080
white = 0xFFFFFF
red = 0xFF0000
orange = 0xFF8C00
yellow = 0xFFFF00
green = 0x00FF00
cyan = 0x00FFFF
blue = 0x0000FF
magenta = 0xFF00FF
pink = 0xFF007F
purple = 0x800080

hsv_colour(hue, sat, val)
random_colour()


===========
Led display
===========

display.brightness
display.set_all(colour)
display.set_led(x, y, colour)
display.set_leds(x_y_to_colour_dict) # x_y_to_colour_dict = {(x,y) : colour}

display.set_3d(x_y_z_to_colour_dict) # x_y_z_to_colour_dict = {(x,y,z) : colour}
# Set the LEDs using 3D coordinates. The origin for the coordinates is the back rear corner of the cube.
              y
              |
              |
              |
              |________x
              /
             /
            /
            z
# The left panel is described by:  x, y when z = 8
# The right panel is described by: z, y when x = 8
# The top panel is described by:   x, z when y = 8
# Coordinates outside this range will be ignored.

display.set_panel(panel, colour_array)
# Set all the leds on one panel.
# Takes an 8 by 8 list of lists.
# The first list is the top row of leds.
# The first colour in that list is the top left led.

display.scroll_text(text, colour=0xFFFFFF, background_colour=0x0, speed=1, with_gap=True)


==========
Microphone
==========

microphone.start_listening() # Returns a audio capture object which is just a queue.
microphone.start_recording_for_frequency_analysis(sample_rate=8000) # Returns an audio capture object.
microphone.get_frequency_buckets(capture, num_buckets=8, min_hz=0, max_hz=4000, sample_rate=8000)


=======
Speaker
=======

speaker.say(text)
speaker.play(path)
speaker.tone(frequency=261.626, duration=0.5, amplitude=0.25, function=sine_wave, ramp=0.0035, trailing_samples=512)


======
Screen
======

screen.set_pixel(x, y, colour)
screen.set_pixels(x, y, pixels)
screen.draw_rectangle(x, y, width, height, colour)
screen.write_text(x, y, text, size, colour, background_colour=None)
screen.draw_image(x, y, path)


=======
Buttons
=======

buttons.top_pressed
buttons.middle_pressed
buttons.bottom_pressed
buttons.top_pressed_count
buttons.middle_pressed_count
buttons.bottom_pressed_count


============
Light sensor
============

light_sensor.ambient_light
light_sensor.last_gesture
light_sensor.num_gestures
light_sensor.within_proximity
light_sensor.num_times_within_proximity


===
IMU
===

imu.pitch
imu.roll
imu.yaw
imu.acceleration_x
imu.acceleration_y
imu.acceleration_z
imu.angular_velocity_x
imu.angular_velocity_y
imu.angular_velocity_z
imu.gravity_x
imu.gravity_y
imu.gravity_z


==================
Environment sensor
==================

env_sensor.temperature
env_sensor.pressure
env_sensor.humidity


==
Pi
==

pi.ip_address()
pi.cpu_temp()
pi.cpu_percent()
pi.ram_percent_used()
pi.disk_percent()
pi.uptime()


========================
Using multiple LumiCubes
========================

Technically all of these objects are on an object called cube, so:

display.set_led(0, 0, red)

is the same as:

cube.display.set_led(0, 0, red)

If you want to talk to another LumiCube create a new cube object with the IP address of the new LumiCube.
You can then access everything in the same way. Although note, it will be talking over the network so the responsiveness will depend on your network.

cube2 = Cube("192.168.0.14")
cube2.display.set_led(0, 0, red)
